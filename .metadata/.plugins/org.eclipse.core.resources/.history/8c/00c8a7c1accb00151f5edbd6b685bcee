//============================================================================
// Name        : project.cpp
// Author      : Pratik Bonde
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================
#include <iostream>
#include <fstream>
#include <sstream>
#include <cstdlib>
#include <string.h>
#include <ctime>
#include <vector>
#include <math.h>
#include <omp.h>

#include"team_stats.h"
using namespace std;
string name;
vector<string> globalArr;
vector<string> commands;

int total_commands = 0;

int arrLength = 0;
int num_of_years;
annual_stats* mydata;
void end();
void bubble(struct team_stats myarray[], string field, int count, string order);
bool comparefield(string field, team_stats t1, team_stats t2);
template<class comp> int greaterthan(comp item1, comp item2);
bool ifequal(int greater, team_stats t1, team_stats t2);
void printfunction(team_stats t[], string field, string order, int len);
void swap(struct team_stats* i, struct team_stats* j);
void swap2(struct combinedteam* i, struct combinedteam* j);
void printcombined(combinedteam t[], string field, string order, int len);
void copydata(int start_index, int end_index, annual_stats a[],
		combinedteam c[]);
void bubblerange(struct combinedteam myarray[], string field, int count,
		string order);
void find(struct combinedteam myarray[], string field, int count,
		string item);
bool comparefieldcombined(string field, combinedteam t1, combinedteam t2);
bool ifequalc(int greater, combinedteam t1, combinedteam t2);

//template <class comp2> void printcombineddata(comp2 c[],int length,string order);
vector<string> split(const string& s);
void readFile();
void insertData();

int main() {
	string line;
	getline(cin, line);

	name = line;
	globalArr.clear();
	arrLength = 0;

	string filename = name + ".txt";
	//string filename = "2015-game-stats.txt";
	ifstream myfile(filename.c_str());
	if (myfile.is_open()) {
		int c = 0;
		string line;
		vector<string> arr;
		while (getline(myfile, line)) {
			if (!line.empty()) {
				if (c == 0) {
					stringstream ss(line);
					ss >> num_of_years;
					mydata = new annual_stats[num_of_years + 1];
					//cout << num_of_years << endl;

				}

				if (c != 0) {
					if (!line.empty()) {
						//string myline;
						//stringstream ss(line);
						//ss>>myline;
						//cout<<line<<endl;
						arr.push_back(line);

					}
				}

			}

			c++;
		}
		for (size_t i = 0; i < arr.size(); i++) {
			globalArr.push_back(arr[i].c_str());
			//	cout << globalArr[i] << endl;
		}
		arr.clear();
	}
	//cout << globalArr.size();

	myfile.close();
	//readFile();

	insertData();
	end();
	return 0;
}
vector<string> split(const string& s) {
	vector<string> ret;
	typedef string::size_type string_size;
	string_size i = 0;

	// invariant: we have processed characters [original value of i, i)
	while (i != s.size()) {
		// ignore leading blanks
		// invariant: characters in range [original i, current i) are all spaces
		while (i != s.size() && isspace(s[i]))
			++i;

		// find end of next word
		string_size j = i;
		// invariant: none of the characters in range [original j, current j)is a space
		while (j != s.size() && !isspace(s[j]))
			j++;

		// if we found some nonwhitespace characters
		if (i != j) {
			// copy from s starting at i and taking j - i chars
			ret.push_back(s.substr(i, j - i));
			i = j;
		}
	}
	return ret;
}
void readFile() {

}

void insertData() {
	int count = 0;
	int num = num_of_years;
	for (int i = 0; i < num; i++) {
		int a = atoi(globalArr[count++].c_str());

		mydata[i].year = a;

		for (int j = 0; j < NO_TEAMS; j++) {
			vector<string> d;

			stringstream ss(globalArr[count++]);

			//u	cout << count << endl;
			string token;
			while (getline(ss, token, '\t')) {
				d.push_back(token);

			}

			strcpy(mydata[i].teams[j].team_name, d[0].c_str()); //cout<<mydata[i].teams[j].team_name<<endl;
			mydata[i].teams[j].games = atoi(d[1].c_str());
			mydata[i].teams[j].pts_per_game = atof(d[2].c_str());
			mydata[i].teams[j].total_points = atoi(d[3].c_str());
			mydata[i].teams[j].scrimmage_plays = atoi(d[4].c_str());
			mydata[i].teams[j].yds_per_game = atof(d[5].c_str());
			mydata[i].teams[j].yds_per_play = atof(d[6].c_str());
			mydata[i].teams[j].first_per_game = atof(d[7].c_str());
			mydata[i].teams[j].third_md = atoi(d[8].c_str());
			mydata[i].teams[j].third_att = atoi(d[9].c_str());
			mydata[i].teams[j].third_pct = atoi(d[10].c_str());
			mydata[i].teams[j].fourth_md = atoi(d[11].c_str());
			mydata[i].teams[j].fourth_att = atoi(d[12].c_str());
			mydata[i].teams[j].fourth_pct = atoi(d[13].c_str());
			mydata[i].teams[j].penalties = atoi(d[14].c_str());
			mydata[i].teams[j].pen_yds = atoi(d[15].c_str());
			strcpy(mydata[i].teams[j].top_per_game, d[16].c_str());
			mydata[i].teams[j].fum = atoi(d[17].c_str());
			mydata[i].teams[j].lost = atoi(d[18].c_str());
			mydata[i].teams[j].to = atoi(d[19].c_str());

			//cout<<mydata[i].teams[j].games<<endl;

		}

	}
	total_commands = atoi(globalArr[count++].c_str());
	for (int i = 0; i < total_commands; i++) {
		commands.push_back(globalArr[count].c_str());
		vector<string> v = split(globalArr[count++].c_str());

		if (v[0].compare("bsort") == 0) {
			int year_exists = 0;

			if (v[1].compare("range") != 0) {
				int given_year = atoi(v[1].c_str());
				int year_index;

				for (int i = 0; i < num_of_years; i++) {
					for (int j = 0; j < num_of_years; j++) {
						if (mydata[j].year == 2003127842) {
							mydata[j].year = 2012;
						}
					}
					if (mydata[i].year == given_year) {
						year_exists = 1;
						year_index = i;

					}

				}
				if (year_exists == 1) {
					//combinedteam* team;
					//team=new combinedteam[NO_TEAMS];
					//copydata(year_index,year_index, mydata,team);
					string field;
					string order;
					field = v[2].c_str();

					order = v[3].c_str();

					int count = NO_TEAMS;
					//cout<<count <<endl;

					bubble(mydata[year_index].teams, field, count, order);
					//printfunction(mydata[year_index].teams,field,order,count);

				} else {
					cout << "Error: No such year bsort." << endl;
				}
			} else if (v[1].compare("range") == 0) {
				int start_year_exists, start_year_index, end_year_exists,
						end_year_index;
				int start_year = atoi(v[2].c_str());
				int end_year = atoi(v[3].c_str());
				int length;
				length = end_year - start_year + 1;
				for (int i = 0; i < num_of_years; i++) {

					if (mydata[i].year == start_year) {
						start_year_exists = 1;
						start_year_index = i;

					}
				}
				for (int i = 0; i < num_of_years; i++) {
					//	cout<<mydata[i].year<<endl;
					if (mydata[i].year == end_year) {
						end_year_exists = 1;
						end_year_index = i;

					}
				}

				if (start_year_exists == 1 && end_year_exists == 1) {
					string field;
					string order;
					int a;
					cout << field;
					field = v[4].c_str();

					order = v[5].c_str();
					int year[length];
					int year_check = start_year;
					for (a = 0; a < length; a++) {
						year[a] = year_check;
						//cout << year[a] << endl;
						year_check++;

					}
					combinedteam* myteam;
					int lengthofmyteam;
					lengthofmyteam = NO_TEAMS * length;
					myteam = new combinedteam[lengthofmyteam + 1];
					copydata(start_year_index, end_year_index, mydata, myteam);
					bubblerange(myteam, field, lengthofmyteam, order);
					delete myteam;
					//printfunction(team, field, order,count);
					//printcombined(myteam,field,order,lengthofmyteam);
					/*for (int i = 0; i < lengthofmyteam; i++) {
					 cout << myteam[i].year << endl;
					 }*/

				}

			}

		} else if (v[0].compare("bfind") == 0) {
			int year_exists_find = 0;
			int given_year_find = atoi(v[1].c_str());
			int index;

			for (int i = 0; i < num_of_years; i++) {
				for (int j = 0; j < num_of_years; j++) {
					if (mydata[j].year == 2003127842) {
						mydata[j].year = 2012;
					}
				}
				if (mydata[i].year == given_year_find) {
					year_exists_find = 1;
					index = i;

				}

			}
			if (year_exists_find == 1) {
				string field;
				string item;
				field = v[2].c_str();

				item = v[3].c_str();

				int count = NO_TEAMS;
				combinedteam* team;
				team=new combinedteam[NO_TEAMS+1];
				copydata(index,index,mydata,team);

				find(team, field, count, item);
			//	findandprint(mydata[index].teams,field,count,item);
				//printfunction(mydata[year_index].teams,field,order,count);
				delete team;
			} else {
				cout << "Error: No such year Single." << endl;
			}

		}

	}
	globalArr.clear();
	//Arr.clear();

}

void end() {
	cout << "End of processing fitness data for: " + name << endl;
	name.clear();
	globalArr.clear();

	arrLength = 0;
	delete mydata;
}

/*
 void exitFunc() {
 cout << "Program terminating" << endl;
 exit(0);
 }
 */

void bubble(struct team_stats myarray[], string field, int count,
		string order) {

	team_stats *t;

	//cout<<"Size of my array  "<<a<<endl;
	for (int a = 1; a < count; a++) {
		for (int b = 0; b <= count - 1; b++) {
			if (comparefield(field, myarray[b], myarray[b + 1])) {
				swap(&myarray[b], &myarray[b + 1]);
			}
		}
	}

	printfunction(myarray, field, order, count);
}

void swap(struct team_stats* i, struct team_stats* j) {
	team_stats t;
	t = *i;
	*i = *j;
	*j = t;

}
void swap2(struct combinedteam* i, struct combinedteam* j) {
	combinedteam t;
	t = *i;
	*i = *j;
	*j = t;

}
bool comparefield(string field, team_stats t1, team_stats t2) {

	int greater = 0;
	bool result = false;
	if (field.compare("team_name") == 0) {

		if (strcmp(t1.team_name, t2.team_name) > 0) {
			greater = 2;
		} else if (strcmp(t1.team_name, t2.team_name) == 0) {
			greater = 0;
		}

	}

	else if (field.compare("games") == 0) {

		greater = greaterthan(t1.games, t2.games);

	} else if (field.compare("pts_per_game") == 0) {
		greater = greaterthan(t1.pts_per_game, t2.pts_per_game);

	} else if (field.compare("total_points") == 0) {
		greater = greaterthan(t1.total_points, t2.total_points);

	} else if (field.compare("scrimmage_plays") == 0) {
		greater = greaterthan(t1.scrimmage_plays, t2.scrimmage_plays);

	} else if (field.compare("yds_per_game") == 0) {
		greater = greaterthan(t1.yds_per_game, t2.yds_per_game);

	} else if (field.compare("yds_per_play") == 0) {
		greater = greaterthan(t1.yds_per_play, t2.yds_per_play);

	} else if (field.compare("first_per_game") == 0) {
		greater = greaterthan(t1.first_per_game, t2.first_per_game);

	} else if (field.compare("third_md") == 0) {
		greater = greaterthan(t1.third_md, t2.third_md);

	} else if (field.compare("third_att") == 0) {
		greater = greaterthan(t1.third_att, t2.third_att);

	} else if (field.compare("third_pct") == 0) {
		greater = greaterthan(t1.third_pct, t2.third_pct);

	} else if (field.compare("fourth_md") == 0) {
		greater = greaterthan(t1.fourth_md, t2.fourth_md);

	} else if (field.compare("fourth_att") == 0) {
		greater = greaterthan(t1.fourth_att, t2.fourth_att);

	} else if (field.compare("fourth_pct") == 0) {
		greater = greaterthan(t1.fourth_pct, t2.fourth_pct);

	} else if (field.compare("penalties") == 0) {
		greater = greaterthan(t1.penalties, t2.penalties);

	} else if (field.compare("pen_yds") == 0) {
		greater = greaterthan(t1.pen_yds, t2.pen_yds);

	} else if (field.compare("top_per_game") == 0) {
		if (strcmp(t1.top_per_game, t2.top_per_game) > 0) {
			greater = 2;
		} else if (strcmp(t1.top_per_game, t2.top_per_game) == 0) {
			greater = 1;
		}

	} else if (field.compare("fum") == 0) {
		greater = greaterthan(t1.fum, t2.fum);

	} else if (field.compare("lost") == 0) {
		greater = greaterthan(t1.lost, t2.lost);

	} else if (field.compare("to") == 0) {
		greater = greaterthan(t1.to, t2.to);

	} else {
		cout << "Error: No such field." << endl;
	}

	result = ifequal(greater, t1, t2);

	return result;

}

bool ifequal(int greater, team_stats t1, team_stats t2) {
	bool result = false;
	if (greater == 2) {
		result = true;
	} else if (greater == 1) {
		if (strcmp(t1.team_name, t2.team_name) > 0) {
			result = true;
		}
	}

	else {
		result = false;
	}
	return result;
}

template<class comp> int greaterthan(comp item1, comp item2) {

	if (item1 > item2) {
		return 2;
	} else if (item1 == item2) {
		return 1;
	} else {
		return 0;
	}

}

void printfunction(team_stats t[], string field, string order, int len) {
	cout << "\n\n" << endl;
	if ("team_name" == field) {
		cout << "Team Name" << endl;
		if (order.compare("incr") == 0) {

			for (int k = 0; k < len; k++) {
				cout << t[k].team_name << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int k = len - 1; k >= 0; k--) {
				cout << t[k].team_name << endl;

			}
		}

	}

	else if ("games" == field) {

		cout << "Team Name \t \t" << field << "\n\n" << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].games << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].games << endl;

			}
		}

	}

	else if ("pts_per_game" == field) {
		cout << "Team Name \t \t" << field << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].pts_per_game << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].pts_per_game << endl;

			}
		}

	} else if ("total_points" == field) {
		cout << "Team Name \t\t" << field << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].total_points << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].total_points << endl;

			}
		}

	} else if ("scrimmage_plays" == field) {
		cout << "Team Name \t\t" << field << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].scrimmage_plays << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].scrimmage_plays << endl;

			}
		}

	} else if ("yds_per_game" == field) {
		cout << "Team Name \t\t" << field << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].yds_per_game << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].yds_per_game << endl;

			}
		}

	} else if ("yds_per_play" == field) {
		cout << "Team Name \t\t" << field << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].yds_per_play << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].yds_per_play << endl;

			}
		}

	} else if ("first_per_game" == field) {
		cout << "Team Name \t\t" << field << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].first_per_game << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].first_per_game << endl;

			}
		}

	} else if ("third_md" == field) {
		cout << "Team Name \t\t" << field << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].third_md << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].third_md << endl;

			}
		}

	} else if ("third_att" == field) {
		cout << "Team Name \t\t" << field << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].third_att << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].third_att << endl;

			}
		}

	} else if ("third_pct" == field) {
		cout << "Team Name \t\t" << field << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].third_pct << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].third_pct << endl;

			}
		}

	} else if ("fourth_md" == field) {
		cout << "Team Name \t \t" << field << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].fourth_md << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].fourth_md << endl;

			}
		}

	} else if ("fourth_att" == field) {
		cout << "Team Name \t\t" << field << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].fourth_att << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].fourth_att << endl;

			}
		}

	} else if ("fourth_pct" == field) {
		cout << "Team Name \t\t" << field << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].fourth_pct << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].fourth_pct << endl;

			}
		}

	} else if ("penalties" == field) {
		cout << "Team Name \t\t" << field << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].penalties << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].penalties << endl;

			}
		}

	} else if ("pen_yds" == field) {
		cout << "Team Name \t\t" << field << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].pen_yds << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].pen_yds << endl;

			}
		}

	} else if ("top_per_game" == field) {
		cout << "Team Name \t\t" << field << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].top_per_game << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].top_per_game << endl;

			}
		}

	} else if ("fum" == field) {
		cout << "Team Name \t\t" << field << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].fum << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].fum << endl;

			}
		}

	} else if ("lost" == field) {
		cout << "Team Name \t\t" << field << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].lost << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].lost << endl;

			}
		}

	} else if ("to" == field) {
		cout << "Team Name \t\t" << field << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].to << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].to << endl;

			}
		}

	} else {
		cout << "Error: No such field. PRINT FUNC" << endl;
	}

}

void copydata(int start_index, int end_index, annual_stats a[],
		combinedteam c[]) {
	int i, j;
	int count = 0;
	for (i = start_index; i <= end_index; i++) {
		for (j = 0; j < NO_TEAMS; j++) {
			c[count].year = a[i].year;
			if (a[i].year == 2003127842) {
				c[count].year = 2012;
			} else {
				c[count].year = a[i].year;
			}

			strcpy(c[count].team_name, a[i].teams[j].team_name);
			c[count].games = a[i].teams[j].games;
			c[count].pts_per_game = a[i].teams[j].pts_per_game;
			c[count].total_points = a[i].teams[j].total_points;
			c[count].scrimmage_plays = a[i].teams[j].scrimmage_plays;
			c[count].yds_per_game = a[i].teams[j].yds_per_game;
			c[count].yds_per_play = a[i].teams[j].yds_per_play;
			c[count].first_per_game = a[i].teams[j].first_per_game;
			c[count].third_md = a[i].teams[j].third_md;
			c[count].third_att = a[i].teams[j].third_att;
			c[count].third_pct = a[i].teams[j].third_pct;
			c[count].fourth_md = a[i].teams[j].fourth_md;
			c[count].fourth_att = a[i].teams[j].fourth_att;
			c[count].fourth_pct = a[i].teams[j].fourth_pct;
			c[count].penalties = a[i].teams[j].penalties;
			c[count].pen_yds = a[i].teams[j].pen_yds;
			strcpy(c[count].top_per_game, a[i].teams[j].top_per_game);
			c[count].fum = a[i].teams[j].fum;
			c[count].lost = a[i].teams[j].lost;
			c[count].to = a[i].teams[j].to;
			count++;
		}
	}

}

void printcombined(combinedteam t[], string field, string order, int len) {
	cout << "\n\n" << endl;
	if ("team_name" == field) {
		cout << "Team Name" << endl;
		if (order.compare("incr") == 0) {

			for (int k = 0; k < len; k++) {
				cout << t[k].team_name << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int k = len - 1; k >= 0; k--) {
				cout << t[k].team_name << endl;

			}
		}

	}

	else if ("games" == field) {
		cout << "Team Name \t \t" << field << "\tYear" << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].games << '\t'
						<< t[i].year << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].games << '\t'
						<< t[i].year << endl;

			}
		}

	}

	else if ("pts_per_game" == field) {
		cout << "Team Name \t \t" << field << "\tYear" << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].pts_per_game << '\t'
						<< t[i].year << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].pts_per_game << '\t'
						<< t[i].year << endl;

			}
		}

	} else if ("total_points" == field) {
		cout << "Team Name \t \t" << field << "\tYear" << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].total_points << '\t'
						<< t[i].year << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].total_points << '\t'
						<< t[i].year << endl;

			}
		}

	} else if ("scrimmage_plays" == field) {
		cout << "Team Name \t \t" << field << "\tYear" << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].scrimmage_plays << '\t'
						<< t[i].year << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].scrimmage_plays << '\t'
						<< t[i].year << endl;

			}
		}

	} else if ("yds_per_game" == field) {
		cout << "Team Name \t \t" << field << "\tYear" << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].yds_per_game << '\t'
						<< t[i].year << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].yds_per_game << '\t'
						<< t[i].year << endl;

			}
		}

	} else if ("yds_per_play" == field) {
		cout << "Team Name \t \t" << field << "\tYear" << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].yds_per_play << '\t'
						<< t[i].year << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].yds_per_play << '\t'
						<< t[i].year << endl;

			}
		}

	} else if ("first_per_game" == field) {
		cout << "Team Name \t \t" << field << "\tYear" << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].first_per_game << '\t'
						<< t[i].year << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].first_per_game << '\t'
						<< t[i].year << endl;

			}
		}

	} else if ("third_md" == field) {
		cout << "Team Name \t \t" << field << "\tYear" << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].third_md << '\t'
						<< t[i].year << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].third_md << '\t'
						<< t[i].year << endl;

			}
		}

	} else if ("third_att" == field) {
		cout << "Team Name \t \t" << field << "\tYear" << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].third_att << '\t'
						<< t[i].year << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].third_att << '\t'
						<< t[i].year << endl;

			}
		}

	} else if ("third_pct" == field) {
		cout << "Team Name \t \t" << field << "\tYear" << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].third_pct << '\t'
						<< t[i].year << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].third_pct << '\t'
						<< t[i].year << endl;

			}
		}

	} else if ("fourth_md" == field) {
		cout << "Team Name \t \t" << field << "\tYear" << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].fourth_md << '\t'
						<< t[i].year << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].fourth_md << '\t'
						<< t[i].year << endl;

			}
		}

	} else if ("fourth_att" == field) {
		cout << "Team Name \t \t" << field << "\tYear" << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].fourth_att << '\t'
						<< t[i].year << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].fourth_att << '\t'
						<< t[i].year << endl;

			}
		}

	} else if ("fourth_pct" == field) {
		cout << "Team Name \t \t" << field << "\tYear" << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].fourth_pct << '\t'
						<< t[i].year << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].fourth_pct << '\t'
						<< t[i].year << endl;

			}
		}

	} else if ("penalties" == field) {
		cout << "Team Name \t \t" << field << "\tYear" << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].penalties << '\t'
						<< t[i].year << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].penalties << '\t'
						<< t[i].year << endl;

			}
		}

	} else if ("pen_yds" == field) {
		cout << "Team Name \t \t" << field << "\tYear" << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].pen_yds << '\t'
						<< t[i].year << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].pen_yds << '\t'
						<< t[i].year << endl;

			}
		}

	} else if ("top_per_game" == field) {
		cout << "Team Name \t \t" << field << "\tYear" << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].top_per_game << '\t'
						<< t[i].year << endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].top_per_game << '\t'
						<< t[i].year << endl;

			}
		}

	} else if ("fum" == field) {
		cout << "Team Name \t \t" << field << "\tYear" << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].fum << '\t' << t[i].year
						<< endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].fum << '\t' << t[i].year
						<< endl;

			}
		}

	} else if ("lost" == field) {
		cout << "Team Name \t \t" << field << "\tYear" << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].lost << '\t' << t[i].year
						<< endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].lost << '\t' << t[i].year
						<< endl;

			}
		}

	} else if ("to" == field) {
		cout << "Team Name \t \t" << field << "\tYear" << endl;
		if (order.compare("incr") == 0) {

			for (int i = 0; i < len; i++) {
				cout << t[i].team_name << '\t' << t[i].to << '\t' << t[i].year
						<< endl;

			}
		} else if (order.compare("decr") == 0) {
			for (int i = len - 1; i >= 0; i--) {
				cout << t[i].team_name << '\t' << t[i].to << '\t' << t[i].year
						<< endl;

			}
		}

	} else {
		cout << "Error: No such field. PRINT FUNC" << endl;
	}

}
void bubblerange(struct combinedteam myarray[], string field, int count,
		string order) {

	combinedteam t;

	//cout<<"Size of my array  "<<a<<endl;
	for (int a = 1; a < count; a++) {
		for (int b = 0; b <= count - 1; b++) {
			if (comparefieldcombined(field, myarray[b], myarray[b + 1])) {
				swap2(&myarray[b], &myarray[b + 1]);
			}
		}
	}
	printcombined(myarray, field, order, count);
}

bool comparefieldcombined(string field, combinedteam t1, combinedteam t2) {
//cout<<field<<endl;
	int greater = 0;
	bool result = false;
	if (field.compare("team_name") == 0) {

		if (strcmp(t1.team_name, t2.team_name) > 0) {
			greater = 2;
		} else if (strcmp(t1.team_name, t2.team_name) == 0) {
			greater = 0;
		}

	}

	else if (field.compare("games") == 0) {

		greater = greaterthan(t1.games, t2.games);

	} else if (field.compare("pts_per_game") == 0) {
		greater = greaterthan(t1.pts_per_game, t2.pts_per_game);

	} else if (field.compare("total_points") == 0) {
		greater = greaterthan(t1.total_points, t2.total_points);

	} else if (field.compare("scrimmage_plays") == 0) {
		greater = greaterthan(t1.scrimmage_plays, t2.scrimmage_plays);

	} else if (field.compare("yds_per_game") == 0) {
		greater = greaterthan(t1.yds_per_game, t2.yds_per_game);

	} else if (field.compare("yds_per_play") == 0) {
		greater = greaterthan(t1.yds_per_play, t2.yds_per_play);

	} else if (field.compare("first_per_game") == 0) {
		greater = greaterthan(t1.first_per_game, t2.first_per_game);

	} else if (field.compare("third_md") == 0) {
		greater = greaterthan(t1.third_md, t2.third_md);

	} else if (field.compare("third_att") == 0) {
		greater = greaterthan(t1.third_att, t2.third_att);

	} else if (field.compare("third_pct") == 0) {
		greater = greaterthan(t1.third_pct, t2.third_pct);

	} else if (field.compare("fourth_md") == 0) {
		greater = greaterthan(t1.fourth_md, t2.fourth_md);

	} else if (field.compare("fourth_att") == 0) {
		greater = greaterthan(t1.fourth_att, t2.fourth_att);

	} else if (field.compare("fourth_pct") == 0) {
		greater = greaterthan(t1.fourth_pct, t2.fourth_pct);

	} else if (field.compare("penalties") == 0) {
		greater = greaterthan(t1.penalties, t2.penalties);

	} else if (field.compare("pen_yds") == 0) {
		greater = greaterthan(t1.pen_yds, t2.pen_yds);

	} else if (field.compare("top_per_game") == 0) {
		if (strcmp(t1.top_per_game, t2.top_per_game) > 0) {
			greater = 2;
		} else if (strcmp(t1.top_per_game, t2.top_per_game) == 0) {
			greater = 1;
		}

	} else if (field.compare("fum") == 0) {
		greater = greaterthan(t1.fum, t2.fum);

	} else if (field.compare("lost") == 0) {
		greater = greaterthan(t1.lost, t2.lost);

	} else if (field.compare("to") == 0) {
		greater = greaterthan(t1.to, t2.to);

	} else {
		//cout << "Error: No such field." << endl;
	}

	result = ifequalc(greater, t1, t2);

	return result;

}

bool ifequalc(int greater, combinedteam t1, combinedteam t2) {
	bool result = false;
	if (greater == 2) {
		result = true;
	} else if (greater == 1) {
		if (strcmp(t1.team_name, t2.team_name) > 0) {
			result = true;
		}
	}

	else {
		result = false;
	}
	return result;
}
void find(struct combinedteam myarray[], string field, int count,
		string item) {

	combinedteam t;

	//cout<<"Size of my array  "<<a<<endl;
	for (int a = 1; a < count; a++) {
		for (int b = 0; b <= count - 1; b++) {
			if (comparefieldcombined(field, myarray[b], myarray[b + 1])) {
				swap2(&myarray[b], &myarray[b + 1]);
			}
		}
	}
	if (field.compare("games") == 0) {
		if(item.compare("max")==0){

		}
		else if(item.compare("min")){

		}
		else if(item.compare("average")){

		}
		else if(item.compare("median")){

		}



		} else if (field.compare("pts_per_game") == 0) {
			if(item.compare("max")==0){

					}
					else if(item.compare("min")){

					}
					else if(item.compare("average")){

					}
					else if(item.compare("median")){

					}

		} else if (field.compare("total_points") == 0) {
			if(item.compare("max")==0){

					}
					else if(item.compare("min")){

					}
					else if(item.compare("average")){

					}
					else if(item.compare("median")){

					}

		} else if (field.compare("scrimmage_plays") == 0) {
			if(item.compare("max")==0){

					}
					else if(item.compare("min")){

					}
					else if(item.compare("average")){

					}
					else if(item.compare("median")){

					}

		} else if (field.compare("yds_per_game") == 0) {
			if(item.compare("max")==0){

					}
					else if(item.compare("min")){

					}
					else if(item.compare("average")){

					}
					else if(item.compare("median")){

					}
		} else if (field.compare("yds_per_play") == 0) {
			if(item.compare("max")==0){

					}
					else if(item.compare("min")){

					}
					else if(item.compare("average")){

					}
					else if(item.compare("median")){

					}

		} else if (field.compare("first_per_game") == 0) {
			if(item.compare("max")==0){

					}
					else if(item.compare("min")){

					}
					else if(item.compare("average")){

					}
					else if(item.compare("median")){

					}


		} else if (field.compare("third_md") == 0) {

			if(item.compare("max")==0){

					}
					else if(item.compare("min")){

					}
					else if(item.compare("average")){

					}
					else if(item.compare("median")){

					}
		} else if (field.compare("third_att") == 0) {
			if(item.compare("max")==0){

					}
					else if(item.compare("min")){

					}
					else if(item.compare("average")){

					}
					else if(item.compare("median")){

					}

		} else if (field.compare("third_pct") == 0) {

			if(item.compare("max")==0){

					}
					else if(item.compare("min")){

					}
					else if(item.compare("average")){

					}
					else if(item.compare("median")){

					}
		} else if (field.compare("fourth_md") == 0) {
			if(item.compare("max")==0){

					}
					else if(item.compare("min")){

					}
					else if(item.compare("average")){

					}
					else if(item.compare("median")){

					}

		} else if (field.compare("fourth_att") == 0) {
			if(item.compare("max")==0){

					}
					else if(item.compare("min")){

					}
					else if(item.compare("average")){

					}
					else if(item.compare("median")){

					}


		} else if (field.compare("fourth_pct") == 0) {
			if(item.compare("max")==0){

					}
					else if(item.compare("min")){

					}
					else if(item.compare("average")){

					}
					else if(item.compare("median")){

					}

		} else if (field.compare("penalties") == 0) {
			if(item.compare("max")==0){

					}
					else if(item.compare("min")){

					}
					else if(item.compare("average")){

					}
					else if(item.compare("median")){

					}

		} else if (field.compare("pen_yds") == 0) {
			if(item.compare("max")==0){

					}
					else if(item.compare("min")){

					}
					else if(item.compare("average")){

					}
					else if(item.compare("median")){

					}

		}

		} else if (field.compare("fum") == 0) {


		} else if (field.compare("lost") == 0) {


		} else if (field.compare("to") == 0) {


		}



}
