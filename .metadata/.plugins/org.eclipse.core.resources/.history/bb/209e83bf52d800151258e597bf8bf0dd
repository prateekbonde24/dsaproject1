//============================================================================
// Name        : project.cpp
// Author      : Pratik Bonde
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================
#include <iostream>
#include <fstream>
#include <sstream>
#include <cstdlib>
#include <string.h>
#include <ctime>
#include <vector>
#include <math.h>
#include <omp.h>

#include"team_stats.h"
using namespace std;
string name;
vector<string> globalArr;
vector<string> commands;

int total_commands = 0;

int arrLength = 0;
int num_of_years;
annual_stats* mydata;
void end();
void bubble(struct team_stats myarray[], string field, int count, string order);
bool comparefield(string field, team_stats t1, team_stats t2);
template<class comp> int greaterthan(comp item1, comp item2);
bool ifequal(int greater, team_stats t1, team_stats t2);
void printfunction(team_stats t[], string field, string order, int len);
void swap(struct team_stats* i, struct team_stats* j);
void swap2(struct combinedteam* i, struct combinedteam* j);
void printcombined(combinedteam t[], string field, string order, int len);
void copydata(int start_index, int end_index, annual_stats a[],
		combinedteam c[]);
void bubblerange(struct combinedteam myarray[], string field, int count,
		string order);
void find(struct combinedteam myarray[], string field, int count, string item);
bool comparefieldcombined(string field, combinedteam t1, combinedteam t2);
bool ifequalc(int greater, combinedteam t1, combinedteam t2);
vector<string> split(const string& s);
void readFile();
void insertData();

int main(int argc, char *argv[]) {
	string filename = argv[1];
	name = filename;
	int num_commands;
	ifstream myfile(filename.c_str());
	if (myfile.is_open()) {
		int c = 0;

		int finish;
		string line;
		vector<string> arr;
		getline(myfile, line); // line 1
		if (!line.empty()) {
			stringstream ss(line);
			ss >> num_of_years;
			mydata = new annual_stats[num_of_years + 1];
		}
		for (int a = 0; a < num_of_years; a++) {
			getline(myfile, line); //year line
			stringstream ss(line);
			int year;
			ss >> year;

			mydata[a].year = year;
			cout << "YEAR" << mydata[a].year << endl;
			for (int i = 0; i < 32; i++) {
				char buf[1000];
				myfile.getline(buf, 1000);

				char * token[20];

				int k = 0;
				token[k] = strtok(buf, "\t");
				//cout << token[k] << endl;
				strcpy(mydata[a].teams[i].team_name, token[k]);	//Team name
				token[++k] = strtok(NULL, "\t");
				mydata[a].teams[i].games = atoi(token[k]);		// Games
				//cout << token[k] << endl;
				token[++k] = strtok(NULL, "\t");
				mydata[a].teams[i].pts_per_game = atof(token[k]);
				//cout << token[k] << endl;
				token[++k] = strtok(NULL, "\t");
				mydata[a].teams[i].total_points = atoi(token[k]);
				//cout << token[k] << endl;
				token[++k] = strtok(NULL, "\t");
				mydata[a].teams[i].scrimmage_plays = atoi(token[k]);
				//cout << token[k] << endl;
				token[++k] = strtok(NULL, "\t");
				mydata[a].teams[i].yds_per_game = atof(token[k]);
				//cout << token[k] << endl;
				token[++k] = strtok(NULL, "\t");
				mydata[a].teams[i].yds_per_play = atof(token[k]);
				//cout << token[k] << endl;
				token[++k] = strtok(NULL, "\t");
				mydata[a].teams[i].first_per_game = atof(token[k]);
				//cout << token[k] << endl;
				token[++k] = strtok(NULL, "\t");
				mydata[a].teams[i].third_md = atoi(token[k]);
				//cout << token[k] << endl;
				token[++k] = strtok(NULL, "\t");
				mydata[a].teams[i].third_att = atoi(token[k]);
				//cout << token[k] << endl;
				token[++k] = strtok(NULL, "\t");
				mydata[a].teams[i].third_pct = atoi(token[k]);
				//cout << token[k] << endl;
				token[++k] = strtok(NULL, "\t");
				mydata[a].teams[i].fourth_md = atoi(token[k]);
				//cout << token[k] << endl;
				token[++k] = strtok(NULL, "\t");
				mydata[a].teams[i].fourth_att = atoi(token[k]);
				//cout << token[k] << endl;
				token[++k] = strtok(NULL, "\t");
				mydata[a].teams[i].fourth_pct = atoi(token[k]);
				//cout << token[k] << endl;
				token[++k] = strtok(NULL, "\t");
				mydata[a].teams[i].penalties = atoi(token[k]);
				//cout << token[k] << endl;
				token[++k] = strtok(NULL, "\t");
				mydata[a].teams[i].pen_yds = atoi(token[k]);
				//cout << token[k] << endl;
				token[++k] = strtok(NULL, "\t");
				strcpy(mydata[a].teams[i].top_per_game, token[k]);
				//cout << token[k] << endl;
				token[++k] = strtok(NULL, "\t");
				mydata[a].teams[i].fum = atoi(token[k]);
				//cout << token[k] << endl;
				token[++k] = strtok(NULL, "\t");
				mydata[a].teams[i].lost = atoi(token[k]);
				//cout << token[k] << endl;
				token[++k] = strtok(NULL, "\t");
				mydata[a].teams[i].to = atoi(token[k]);

			}
		}
		if (getline(myfile, line)) {

			num_commands = atoi(line.c_str());
			cout << "Commands-" << num_commands << endl;
		}

		for (int k = 0; k < num_commands; k++) {

			char buf[1000];
			myfile.getline(buf, 1000);

			char * token[20];

			int j = 0;
			token[j] = strtok(buf, " ");
			if (strcmp(token[j], "bsort") == 0) {
				token[++j] = strtok(NULL, " ");
				if (strcmp(token[j], "range") != 0) {
					int year_exists = 0;

					int given_year = atoi(token[j]);
					cout<<given_year;
					int year_index;
					for (int i = 0; i < num_of_years; i++) {

						if (mydata[i].year == given_year) {
							year_exists = 1;
							year_index = i;

						}

					}
					if (year_exists == 1) {
						token[++j] = strtok(NULL, " ");
						string field;
						string order;
						field = token[j];
						token[++j] = strtok(NULL, " ");
						order = token[j];
						int count = NO_TEAMS;
						bubble(mydata[year_index].teams, field, count, order);
						//printfunction(mydata[year_index].teams,field,order,count);

					} else {
						cout << "Error: No such year." << endl;
					}

				}

/*				else if (strcmp(token[j], "range") == 0) {
					int start_year_exists, start_year_index, end_year_exists,
							end_year_index;
					token[++j] = strtok(NULL, " ");
					int start_year = atoi(token[j]);
					token[++j] = strtok(NULL, " ");
					int end_year = atoi(token[j]);
					int length;
					length = end_year - start_year + 1;
					for (int i = 0; i < num_of_years; i++) {

						if (mydata[i].year == start_year) {
							start_year_exists = 1;
							start_year_index = i;

						}
					}
					for (int i = 0; i < num_of_years; i++) {

						if (mydata[i].year == end_year) {
							end_year_exists = 1;
							end_year_index = i;

						}
					}

					if (start_year_exists == 1 && end_year_exists == 1) {
						string field;
						string order;
						int a;
						token[++j] = strtok(NULL, " ");
						field = token[j];
						token[++j] = strtok(NULL, " ");
						order =token[j] ;
						int year[length];
						int year_check = start_year;
						for (a = 0; a < length; a++) {
							year[a] = year_check;
							//cout << year[a] << endl;
							year_check++;

						}
						combinedteam* myteam;
						int lengthofmyteam;
						lengthofmyteam = NO_TEAMS * length;
						myteam = new combinedteam[lengthofmyteam + 1];
						copydata(start_year_index, end_year_index, mydata,
								myteam);
						bubblerange(myteam, field, lengthofmyteam, order);
						delete myteam;


					}

				}*/

			} else if (strcmp(token[j], "qsort") == 0) {
				token[++j] = strtok(NULL, " ");
				if (strcmp(token[j], "range") != 0) {

				}

				else if (strcmp(token[j], "range") == 0) {

				}

			} else if (strcmp(token[j], "qfind") == 0) {

			} else if (strcmp(token[j], "bfind") == 0) {

			}

			else if (strcmp(token[j], "pmin") == 0) {

			} else if (strcmp(token[j], "pmax") == 0) {

			}

		}
	}
	myfile.close();
//readFile();

//insertData();
//end();
	return 0;
}
vector<string> split(const string& s) {
	vector<string> ret;
	typedef string::size_type string_size;
	string_size i = 0;

	while (i != s.size()) {
		while (i != s.size() && isspace(s[i]))
			++i;

		// find end of next word
		string_size j = i;
		while (j != s.size() && !isspace(s[j]))
			j++;

		// if we found some nonwhitespace characters
		if (i != j) {
			// copy from s starting at i and taking j - i chars
			ret.push_back(s.substr(i, j - i));
			i = j;
		}
	}
	return ret;
}
void readFile() {

}

void insertData() {
	int count = 0;
	int num = num_of_years;
	for (int i = 0; i < num; i++) {
		int a = atoi(globalArr[count++].c_str());

		mydata[i].year = a;

		for (int j = 0; j < NO_TEAMS; j++) {
			vector<string> d;

			stringstream ss(globalArr[count++]);

			//u	cout << count << endl;
			string token;
			while (getline(ss, token, '\t')) {
				d.push_back(token);

			}

			strcpy(mydata[i].teams[j].team_name, d[0].c_str()); //cout<<mydata[i].teams[j].team_name<<endl;
			mydata[i].teams[j].games = atoi(d[1].c_str());
			mydata[i].teams[j].pts_per_game = atof(d[2].c_str());
			mydata[i].teams[j].total_points = atoi(d[3].c_str());
			mydata[i].teams[j].scrimmage_plays = atoi(d[4].c_str());
			mydata[i].teams[j].yds_per_game = atof(d[5].c_str());
			mydata[i].teams[j].yds_per_play = atof(d[6].c_str());
			mydata[i].teams[j].first_per_game = atof(d[7].c_str());
			mydata[i].teams[j].third_md = atoi(d[8].c_str());
			mydata[i].teams[j].third_att = atoi(d[9].c_str());
			mydata[i].teams[j].third_pct = atoi(d[10].c_str());
			mydata[i].teams[j].fourth_md = atoi(d[11].c_str());
			mydata[i].teams[j].fourth_att = atoi(d[12].c_str());
			mydata[i].teams[j].fourth_pct = atoi(d[13].c_str());
			mydata[i].teams[j].penalties = atoi(d[14].c_str());
			mydata[i].teams[j].pen_yds = atoi(d[15].c_str());
			strcpy(mydata[i].teams[j].top_per_game, d[16].c_str());
			mydata[i].teams[j].fum = atoi(d[17].c_str());
			mydata[i].teams[j].lost = atoi(d[18].c_str());
			mydata[i].teams[j].to = atoi(d[19].c_str());

			//cout<<mydata[i].teams[j].games<<endl;

		}

	}
	total_commands = atoi(globalArr[count++].c_str());
	for (int i = 0; i < total_commands; i++) {
		commands.push_back(globalArr[count].c_str());
		vector<string> v = split(globalArr[count++].c_str());

		if (v[0].compare("bsort") == 0) {
			int year_exists = 0;

			if (v[1].compare("range") != 0) {
				int given_year = atoi(v[1].c_str());
				int year_index;

				for (int i = 0; i < num_of_years; i++) {
					for (int j = 0; j < num_of_years; j++) {
						if (mydata[j].year == 2003127842) {
							mydata[j].year = 2012;
						}
					}
					if (mydata[i].year == given_year) {
						year_exists = 1;
						year_index = i;

					}

				}
				if (year_exists == 1) {
					//combinedteam* team;
					//team=new combinedteam[NO_TEAMS];
					//copydata(year_index,year_index, mydata,team);
					string field;
					string order;
					field = v[2].c_str();

					order = v[3].c_str();

					int count = NO_TEAMS;
					//cout<<count <<endl;

					bubble(mydata[year_index].teams, field, count, order);
					//printfunction(mydata[year_index].teams,field,order,count);

				} else {
					cout << "Error: No such year bsort." << endl;
				}
			} else if (v[1].compare("range") == 0) {
				int start_year_exists, start_year_index, end_year_exists,
						end_year_index;
				int start_year = atoi(v[2].c_str());
				int end_year = atoi(v[3].c_str());
				int length;
				length = end_year - start_year + 1;
				for (int i = 0; i < num_of_years; i++) {

					if (mydata[i].year == start_year) {
						start_year_exists = 1;
						start_year_index = i;

					}
				}
				for (int i = 0; i < num_of_years; i++) {
					//	cout<<mydata[i].year<<endl;
					if (mydata[i].year == end_year) {
						end_year_exists = 1;
						end_year_index = i;

					}
				}

				if (start_year_exists == 1 && end_year_exists == 1) {
					string field;
					string order;
					int a;
					cout << field;
					field = v[4].c_str();

					order = v[5].c_str();
					int year[length];
					int year_check = start_year;
					for (a = 0; a < length; a++) {
						year[a] = year_check;
						//cout << year[a] << endl;
						year_check++;

					}
					combinedteam* myteam;
					int lengthofmyteam;
					lengthofmyteam = NO_TEAMS * length;
					myteam = new combinedteam[lengthofmyteam + 1];
					copydata(start_year_index, end_year_index, mydata, myteam);
					bubblerange(myteam, field, lengthofmyteam, order);
					delete myteam;
					//printfunction(team, field, order,count);
					//printcombined(myteam,field,order,lengthofmyteam);
					/*for (int i = 0; i < lengthofmyteam; i++) {
					 cout << myteam[i].year << endl;
					 }*/

				}

			}

		} else if (v[0].compare("bfind") == 0) {
			int year_exists_find = 0;
			int given_year_find = atoi(v[1].c_str());
			int index;

			for (int i = 0; i < num_of_years; i++) {
				for (int j = 0; j < num_of_years; j++) {
					if (mydata[j].year == 2003127842) {
						mydata[j].year = 2012;
					}
				}
				if (mydata[i].year == given_year_find) {
					year_exists_find = 1;
					index = i;

				}

			}
			if (year_exists_find == 1) {
				string field;
				string item;
				field = v[2].c_str();

				item = v[3].c_str();

				int count = NO_TEAMS;
				combinedteam* team;
				team = new combinedteam[NO_TEAMS + 1];
				copydata(index, index, mydata, team);

				find(team, field, count, item);
				//	findandprint(mydata[index].teams,field,count,item);
				//printfunction(mydata[year_index].teams,field,order,count);
				delete team;
			} else {
				cout << "Error: No such year Single." << given_year_find
						<< endl;
			}

		}

	}
	globalArr.clear();
//Arr.clear();

}

void end() {
	cout << "End of processing " + name << endl;
	name.clear();
	globalArr.clear();

	arrLength = 0;
	delete mydata;
}

/*
 void exitFunc() {
 cout << "Program terminating" << endl;
 exit(0);
 }
 */

