//============================================================================
// Name        : Time.cpp
// Author      : Pratik Bonde
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include<ctime>
#include<iostream>
#include<cstdlib>
#include<fstream>

using namespace std;
void bubble(int myarray[],int len);
void swap(int* a, int* b);
int partition (int arr[], int l, int h);
void quickSort(int arr[], int l, int h);

int* Merge(int* A,int p, int q, int r,int len);
int* ParallelMergeSort(int* A, int lo, int hi, int len);
void bmax(int myarray[],int len);
void pmax(int myarray[],int len);
void qmax(int myarray[],int len);
int main()
{
	int n;
	cerr << "How many random numbers do you want to generate?\n";
	cin >> n;
    cout << n << endl;
    int a[n];
    clock_t start;
    double duration;
	srand( (unsigned) time(NULL) );

	for(int i = 0; i < n; i++){
		a[i]= rand() % 100000;
	}

	start =clock();

bubble(a,n);
	duration = ( clock() - start ) / (double) (CLOCKS_PER_SEC/1000);

	cout<<"Time: "<< duration <<" ms \n";
}

void bubble(int myarray[],int len) {

int count;
count=len;
	for (int a = 1; a < count; a++) {
		for (int b = 0; b < count - 1; b++) {

			if (myarray[b]>myarray[b + 1]) {
				swap(&myarray[b],&myarray[b+1]);

			}
		}
	}


}
void swap(int* a, int* b)
{
    int t = *a;
    *a = *b;
    *b = t;
}
int partition (int arr[], int l, int h)
{
    int x = arr[h];    // pivot
    int i = (l - 1);  // Index of smaller element

    for (int j = l; j <= h- 1; j++)
    {
        // If current element is smaller than or equal to pivot
        if (arr[j] <= x)
        {
            i++;    // increment index of smaller element
            swap(&arr[i], &arr[j]);  // Swap current element with index
        }
    }
    swap(&arr[i + 1], &arr[h]);
    return (i + 1);
}
void quickSort(int arr[], int l, int h)
{
    if (l < h)
    {
        int p = partition(arr, l, h); /* Partitioning index */
        quickSort(arr, l, p - 1);
        quickSort(arr, p + 1, h);
    }
}


int* ParallelMergeSort(int* A, int lo, int hi, int len){
// Takes an int array and sorts it
	int mid;
// Declration
	if(lo<hi){
// If there is <2 elements skip
		mid = (lo+hi)/2;
// calculates the mid point
#pragma omp parallel sections num_threads(2) default(shared) firstprivate(mCompC,mSwapC)

// Starts the parallel portion (2 threads)
{
	#pragma omp section
// First portion
	ParallelMergeSort(A, lo, mid,len);
// Divides
	#pragma omp section
// Second portion
	ParallelMergeSort(A, mid+1, hi,len);
}
//synchronization
#pragma omp barrier
// Merges to return the array
return Merge(A,lo,mid,hi,len);
	}
}

int* Merge(int* A,int p, int q, int r,int len){
// Merges the "two" arrays sent to it
	int *B = new int[len];
// Temp array to help sort
	for(int i2 = 0; i2<len; i2++){
// Assigns values of array A to B
		B[i2]=A[i2];
	}
	int i=p, j=q+1, z=p;
// Varribles to help sort
	while(i<=q && j<=r){
// While start is < final value of the 1/2 do...
		if(B[i]<=B[j]){
// Compares element's vlaues and assigns appropiatly
			A[z] = B[i];
			i++;
		}else{
			A[z] = B[j];
			j++;
		}
		z++;

	}
	if(i<=q){
// Checks which element did not finish writing
		while(z<=r && i<=q){
// Finishes assigning values for first 1/2
               		A[z]=B[i];
			i++;
			z++;
		}
        }else if(j<=r){
// Finishes assigning values for second 1/2
		while(z<=r && i<=q){
			A[z]=B[j];
			j++;
			z++;
		}
       	}
	delete[] B;
// Returns combined sorted array
	return A;

}
void bmax(int myarray[],int len){
bubble(myarray,len);
cout<<"Max: "<<myarray[len-1]<<endl;
}
void qmax(int myarray[],int len){
quickSort(myarray,0,len-1);
cout<<"Max: "<<myarray[len-1]<<endl;
}

void pmax(int myarray[],int len){
ParallelMergeSort(myarray,0,len-1);
cout<<"Max: "<<myarray[len-1]<<endl;
}


